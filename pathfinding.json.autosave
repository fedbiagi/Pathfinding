{"firstLayout":"","gdVersion":{"build":243,"major":5,"minor":5,"revision":0},"properties":{"adaptGameResolutionAtRuntime":true,"antialiasingMode":"MSAA","antialisingEnabledOnMobile":false,"folderProject":false,"orientation":"default","packageName":"it.fedbiagi","pixelsRounding":false,"projectUuid":"4c435774-0ed7-4164-b883-1b70af0f7d52","scaleMode":"linear","sizeOnStartupMode":"scaleOuter","templateSlug":"","version":"1.0.0","name":"Pathfinding","description":"","author":"","windowWidth":300,"windowHeight":240,"latestCompilationDirectory":"","maxFPS":60,"minFPS":20,"verticalSync":false,"platformSpecificAssets":{"android-icon-144":"","android-icon-192":"","android-icon-36":"","android-icon-48":"","android-icon-72":"","android-icon-96":"","android-windowSplashScreenAnimatedIcon":"","desktop-icon-512":"","ios-icon-100":"","ios-icon-1024":"","ios-icon-114":"","ios-icon-120":"","ios-icon-144":"","ios-icon-152":"","ios-icon-167":"","ios-icon-180":"","ios-icon-20":"","ios-icon-29":"","ios-icon-40":"","ios-icon-50":"","ios-icon-57":"","ios-icon-58":"","ios-icon-60":"","ios-icon-72":"","ios-icon-76":"","ios-icon-80":"","ios-icon-87":""},"loadingScreen":{"backgroundColor":0,"backgroundFadeInDuration":0.2,"backgroundImageResourceName":"","gdevelopLogoStyle":"light","logoAndProgressFadeInDuration":0.2,"logoAndProgressLogoFadeInDelay":0.0,"minDuration":1.5,"progressBarColor":16777215,"progressBarHeight":20.0,"progressBarMaxWidth":200.0,"progressBarMinWidth":40.0,"progressBarWidthPercent":30.0,"showGDevelopSplash":true,"showProgressBar":true},"watermark":{"placement":"bottom-left","showWatermark":true},"authorIds":[],"authorUsernames":[],"categories":[],"playableDevices":[],"extensionProperties":[],"platforms":[{"name":"GDevelop JS platform"}],"currentPlatform":"GDevelop JS platform"},"resources":{"resources":[{"file":"assets/NewSprite.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite","smoothed":true,"userAdded":false},{"file":"assets/NewSprite2.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite2","smoothed":true,"userAdded":false},{"file":"assets/NewSprite3.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite3","smoothed":true,"userAdded":false},{"file":"assets/NewSprite4.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite4","smoothed":true,"userAdded":false},{"file":"assets/NewSprite5.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite5","smoothed":true,"userAdded":false},{"file":"assets/NewTiledSprite.png","kind":"image","metadata":"{\"extension\":\".png\",\"pskl\":{},\"localFilePath\":\"assets/NewTiledSprite.png\"}","name":"NewTiledSprite","smoothed":true,"userAdded":false},{"file":"assets/NewTiledSprite2.png","kind":"image","metadata":"{\"extension\":\".png\",\"pskl\":{},\"localFilePath\":\"assets/NewTiledSprite2.png\"}","name":"NewTiledSprite2","smoothed":true,"userAdded":false},{"file":"assets/NewSprite6.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite6","smoothed":true,"userAdded":false},{"file":"assets/NewSprite7.png","kind":"image","metadata":"{\"extension\":\".png\"}","name":"NewSprite7","smoothed":true,"userAdded":false},{"file":"assets/NewSprite8.png","kind":"image","metadata":"{\"extension\":\".png\",\"localFilePath\":\"assets/NewSprite8.png\"}","name":"NewSprite8","smoothed":true,"userAdded":false}],"resourceFolders":[]},"objects":[],"objectsFolderStructure":{"folderName":"__ROOT"},"objectsGroups":[],"variables":[],"layouts":[{"b":209,"disableInputWhenNotFocused":true,"mangledName":"Main","name":"Main","r":209,"standardSortMethod":true,"stopSoundsOnStartup":true,"title":"","v":209,"uiSettings":{"grid":false,"gridType":"rectangular","gridWidth":32.0,"gridHeight":32.0,"gridOffsetX":0.0,"gridOffsetY":0.0,"gridColor":10401023.0,"gridAlpha":0.8,"snap":false,"zoomFactor":1.0,"windowMask":false,"selectedLayer":""},"objectsGroups":[],"variables":[{"name":"path","type":"array","children":[]}],"instances":[{"angle":0.0,"customSize":false,"height":0.0,"keepRatio":true,"layer":"","name":"Grid","persistentUuid":"d0b72028-d935-4220-9621-51eb5ad8eca0","width":0.0,"x":0.0,"y":0.0,"zOrder":1,"numberProperties":[],"stringProperties":[],"initialVariables":[]},{"angle":0.0,"customSize":false,"height":0.0,"keepRatio":true,"layer":"","name":"Player","persistentUuid":"2950e447-e7f7-4c4a-97b8-ade6b711f890","width":0.0,"x":22.0,"y":10.0,"zOrder":2,"numberProperties":[],"stringProperties":[],"initialVariables":[]}],"objects":[{"adaptCollisionMaskAutomatically":true,"assetStoreId":"","name":"Player","type":"Sprite","updateIfNotVisible":false,"variables":[{"name":"pathJson","type":"string","value":"\"\""},{"name":"path","type":"array","children":[]},{"name":"pathStep","type":"number","value":0.0},{"name":"pathLength","type":"number","value":0.0},{"name":"targetX","type":"number","value":0.0},{"name":"targetY","type":"number","value":0.0}],"effects":[],"behaviors":[{"name":"Pathfinding","type":"PathfindingBehavior::PathfindingBehavior","acceleration":40.0,"allowDiagonals":false,"angleOffset":0.0,"angularMaxSpeed":180.0,"cellHeight":2.0,"cellWidth":2.0,"extraBorder":0.0,"gridOffsetX":0.0,"gridOffsetY":0.0,"maxSpeed":40.0,"rotateObject":false,"smoothingMaxCellGap":1.0}],"animations":[{"name":"NewSprite","useMultipleDirections":false,"directions":[{"looping":false,"metadata":"{\"pskl\":{}}","timeBetweenFrames":0.08,"sprites":[{"hasCustomCollisionMask":true,"image":"NewSprite5","points":[],"originPoint":{"name":"origine","x":0.0,"y":0.0},"centerPoint":{"automatic":true,"name":"centre","x":0.0,"y":0.0},"customCollisionMask":[[{"x":0.0,"y":0.0},{"x":36.0,"y":0.0},{"x":36.0,"y":96.0},{"x":0.0,"y":96.0}]]}]}]}]},{"adaptCollisionMaskAutomatically":true,"assetStoreId":"","name":"Wall","type":"Sprite","updateIfNotVisible":false,"variables":[],"effects":[],"behaviors":[],"animations":[{"name":"NewSprite","useMultipleDirections":false,"directions":[{"looping":false,"metadata":"{\"pskl\":{}}","timeBetweenFrames":0.08,"sprites":[{"hasCustomCollisionMask":true,"image":"NewSprite2","points":[],"originPoint":{"name":"origine","x":0.0,"y":0.0},"centerPoint":{"automatic":true,"name":"centre","x":0.0,"y":0.0},"customCollisionMask":[[{"x":0.0,"y":0.0},{"x":8.0,"y":0.0},{"x":8.0,"y":8.0},{"x":0.0,"y":8.0}]]}]}]}]},{"adaptCollisionMaskAutomatically":true,"assetStoreId":"","name":"Target","type":"Sprite","updateIfNotVisible":false,"variables":[],"effects":[],"behaviors":[],"animations":[{"name":"NewSprite","useMultipleDirections":false,"directions":[{"looping":false,"metadata":"{\"pskl\":{}}","timeBetweenFrames":0.08,"sprites":[{"hasCustomCollisionMask":true,"image":"NewSprite7","points":[],"originPoint":{"name":"origine","x":0.0,"y":0.0},"centerPoint":{"automatic":true,"name":"centre","x":0.0,"y":0.0},"customCollisionMask":[[{"x":0.0,"y":0.0},{"x":4.0,"y":0.0},{"x":4.0,"y":4.0},{"x":0.0,"y":4.0}]]}]}]}]},{"adaptCollisionMaskAutomatically":true,"assetStoreId":"","name":"Start","type":"Sprite","updateIfNotVisible":false,"variables":[],"effects":[],"behaviors":[],"animations":[{"name":"NewSprite","useMultipleDirections":false,"directions":[{"looping":false,"metadata":"{\"pskl\":{}}","timeBetweenFrames":0.08,"sprites":[{"hasCustomCollisionMask":true,"image":"NewSprite4","points":[],"originPoint":{"name":"origine","x":0.0,"y":0.0},"centerPoint":{"automatic":true,"name":"centre","x":0.0,"y":0.0},"customCollisionMask":[[{"x":0.0,"y":0.0},{"x":8.0,"y":0.0},{"x":8.0,"y":8.0},{"x":0.0,"y":8.0}]]}]}]}]},{"assetStoreId":"","height":168.0,"name":"Grid","texture":"NewTiledSprite2","type":"TiledSpriteObject::TiledSprite","width":300.0,"variables":[],"effects":[],"behaviors":[]},{"adaptCollisionMaskAutomatically":true,"assetStoreId":"","name":"NewTarget","type":"Sprite","updateIfNotVisible":false,"variables":[],"effects":[],"behaviors":[],"animations":[{"name":"NewSprite","useMultipleDirections":false,"directions":[{"looping":false,"metadata":"{\"pskl\":{}}","timeBetweenFrames":0.08,"sprites":[{"hasCustomCollisionMask":true,"image":"NewSprite8","points":[],"originPoint":{"name":"origine","x":0.0,"y":0.0},"centerPoint":{"automatic":true,"name":"centre","x":0.0,"y":0.0},"customCollisionMask":[[{"x":0.0,"y":0.0},{"x":4.0,"y":0.0},{"x":4.0,"y":4.0},{"x":0.0,"y":4.0}]]}]}]}]}],"objectsFolderStructure":{"folderName":"__ROOT","children":[{"objectName":"Player"},{"objectName":"Wall"},{"objectName":"Target"},{"objectName":"NewTarget"},{"objectName":"Start"},{"objectName":"Grid"}]},"events":[{"type":"BuiltinCommonInstructions::Standard","conditions":[{"type":{"value":"MouseButtonFromTextPressed"},"parameters":["","\"Left\""]},{"type":{"value":"BuiltinCommonInstructions::Once"},"parameters":[]}],"actions":[],"events":[{"type":"BuiltinCommonInstructions::Link","include":{"includeConfig":0},"target":"PathFinding"}]},{"type":"BuiltinCommonInstructions::Standard","conditions":[{"type":{"value":"StringObjectVariable"},"parameters":["Player","pathJson","!=","\"\""]}],"actions":[{"type":{"value":"JSONToVariableStructure2"},"parameters":["Player.pathJson","path"]},{"type":{"value":"SetNumberObjectVariable"},"parameters":["Player","pathStep","=","0"]},{"type":{"value":"SetStringObjectVariable"},"parameters":["Player","pathJson","=","\"\""]}]},{"type":"BuiltinCommonInstructions::Standard","conditions":[{"type":{"value":"NumberObjectVariable"},"parameters":["Player","pathStep","<","Player.pathLength"]}],"actions":[{"type":{"value":"SetNumberObjectVariable"},"parameters":["Player","targetX","=","path[Player.pathStep].x"]},{"type":{"value":"SetNumberObjectVariable"},"parameters":["Player","targetY","=","path[Player.pathStep].y"]},{"type":{"value":"SetNumberObjectVariable"},"parameters":["Player","pathStep","=","Player.pathStep + 1"]},{"type":{"value":"MettreXY"},"parameters":["Player","=","Player.targetX","=","Player.targetY"]}]},{"disabled":true,"type":"BuiltinCommonInstructions::Standard","conditions":[{"type":{"value":"NumberObjectVariable"},"parameters":["Player","pathStep",">=","Player.pathLength"]}],"actions":[]},{"type":"BuiltinCommonInstructions::Standard","conditions":[],"actions":[]}],"layers":[{"ambientLightColorB":200,"ambientLightColorG":200,"ambientLightColorR":200,"camera3DFarPlaneDistance":10000.0,"camera3DFieldOfView":45.0,"camera3DNearPlaneDistance":3.0,"cameraType":"","followBaseLayerCamera":false,"isLightingLayer":false,"isLocked":false,"name":"","renderingType":"","visibility":true,"cameras":[{"defaultSize":true,"defaultViewport":true,"height":0.0,"viewportBottom":1.0,"viewportLeft":0.0,"viewportRight":1.0,"viewportTop":0.0,"width":0.0}],"effects":[{"effectType":"Scene3D::HemisphereLight","name":"3D Ambient Hemisphere Light","doubleParameters":{"elevation":40.0,"intensity":0.33,"rotation":300.0},"stringParameters":{"groundColor":"127;127;127","skyColor":"255;255;255","top":"Z+"},"booleanParameters":{}},{"effectType":"Scene3D::DirectionalLight","name":"3D Sun Light","doubleParameters":{"distanceFromCamera":1500.0,"elevation":40.0,"frustumSize":4000.0,"intensity":0.75,"minimumShadowBias":0.0,"rotation":300.0},"stringParameters":{"color":"255;255;255","shadowQuality":"medium","top":"Z+"},"booleanParameters":{"isCastingShadow":true}}]},{"ambientLightColorB":200,"ambientLightColorG":200,"ambientLightColorR":200,"camera3DFarPlaneDistance":10000.0,"camera3DFieldOfView":45.0,"camera3DNearPlaneDistance":3.0,"cameraType":"","followBaseLayerCamera":false,"isLightingLayer":false,"isLocked":false,"name":"dimensione matrice","renderingType":"","visibility":true,"cameras":[],"effects":[{"effectType":"Scene3D::HemisphereLight","name":"3D Ambient Hemisphere Light","doubleParameters":{"elevation":40.0,"intensity":0.33,"rotation":300.0},"stringParameters":{"groundColor":"127;127;127","skyColor":"255;255;255","top":"Z+"},"booleanParameters":{}},{"effectType":"Scene3D::DirectionalLight","name":"3D Sun Light","doubleParameters":{"distanceFromCamera":1500.0,"elevation":40.0,"frustumSize":4000.0,"intensity":0.75,"minimumShadowBias":0.0,"rotation":300.0},"stringParameters":{"color":"255;255;255","shadowQuality":"medium","top":"Z+"},"booleanParameters":{"isCastingShadow":true}}]}],"behaviorsSharedData":[{"name":"Animation","type":"AnimatableCapability::AnimatableBehavior"},{"name":"Effect","type":"EffectCapability::EffectBehavior"},{"name":"Flippable","type":"FlippableCapability::FlippableBehavior"},{"name":"Opacity","type":"OpacityCapability::OpacityBehavior"},{"name":"Pathfinding","type":"PathfindingBehavior::PathfindingBehavior"},{"name":"Resizable","type":"ResizableCapability::ResizableBehavior"},{"name":"Scale","type":"ScalableCapability::ScalableBehavior"}]}],"externalEvents":[{"associatedLayout":"Main","name":"PathFinding","events":[{"type":"BuiltinCommonInstructions::Standard","conditions":[],"actions":[]},{"type":"BuiltinCommonInstructions::JsCode","inlineCode":["// === FUNCTION: Compute grid index ===","function getGridPos(x, y, cellSize) {","  return [Math.floor(x / cellSize), Math.floor(y / cellSize)];","}","","// === Simple Priority Queue for A* ===","function PriorityQueue() {","  const elements = [];","  return {","    enqueue(element) {","      elements.push(element);","      elements.sort((a, b) => a.f - b.f);","    },","    dequeue() {","      return elements.shift();","    },","    isEmpty() {","      return elements.length === 0;","    },","    some(fn) {","      return elements.some(fn);","    }","  };","}","","// === Check if the player rectangle can fit in (x, y) ===","function isFreeSpace(grid, x, y, width, height) {","  const rows = grid.length;","  const cols = grid[0].length;","  if (x < 0 || y < 0 || x + width > cols || y + height > rows) {","    return false;","  }","","  for (let dy = 0; dy < height; dy++) {","    for (let dx = 0; dx < width; dx++) {","      if (grid[y + dy][x + dx] === 1) {","        return false;","      }","    }","  }","  return true;","}","","// === A* pathfinding adapted for a rectangular player ===","function aStarGrid(grid, start, goal, width, height) {","","  const open = PriorityQueue();","  const closed = new Set();","  open.enqueue({ pos: start, parent: null, g: 0, h: 0, f: 0 });","","  while (!open.isEmpty()) {","    const node = open.dequeue();","    closed.add(node.pos.toString());","","    const [x, y] = node.pos;","//alert(node.pos[0]);","    // ✅ Goal check: player reaches goal only if the goal matches the center of the rectangle","    const centerX = x + Math.floor(width / 2);","    const centerY = y + Math.floor(height / 2);","","    const reached = (centerX === goal[0] && centerY === goal[1]);","","    if (reached) {","      // Build path from current node","      const path = [];","      let n = node;","      while (n) {","        path.push(n.pos);","        n = n.parent;","      }","      return path.reverse();","    }","","    // 4-directional movement","    const neighbors = [","      [x - 1, y],","      [x + 1, y],","      [x, y - 1],","      [x, y + 1]","    ];","","    for (const [nx, ny] of neighbors) {","      if (!isFreeSpace(grid, nx, ny, width, height)) continue;","      if (closed.has([nx, ny].toString())) continue;","","      const neighborNode = {","        pos: [nx, ny],","        parent: node,","        g: node.g + 1,","        h: Math.abs(nx - goal[0]) + Math.abs(ny - goal[1]) // Manhattan heuristic","      };","      neighborNode.f = neighborNode.g + neighborNode.h;","","      if (open.some(n => n.pos.toString() === neighborNode.pos.toString() && n.f <= neighborNode.f))","        continue;","","      open.enqueue(neighborNode);","    }","  }","","  return null;","}","","function isRectValid(grid, target, width, height) {","  const rows = grid.length;","  const cols = grid[0].length;","","  const [cx, cy] = target;","","  // Calcola l'angolo in alto a sinistra del rettangolo centrato sul target","  const x0 = Math.floor(cx - width / 2);","  const y0 = Math.floor(cy - height / 2);","","  // Controlla se il rettangolo è completamente dentro la griglia","  if (x0 < 0 || y0 < 0 || x0 + width > cols || y0 + height > rows) {","    return false;","  }","","  // Controlla se ci sono muri","  for (let y = y0; y < y0 + height; y++) {","    for (let x = x0; x < x0 + width; x++) {","      if (grid[y][x] === 1) {","        return false;","      }","    }","  }","","  return true;","}","","function getRectIssues(grid, target, width, height) {","  const rows = grid.length;","  const cols = grid[0].length;","","  const [cx, cy] = target;","","  const x0 = Math.floor(cx - width / 2);","  const y0 = Math.floor(cy - height / 2);","  const x1 = x0 + width - 1;","  const y1 = y0 + height - 1;","","  const issues = { top: false, bottom: false, left: false, right: false };","","  // 🔹 Controllo uscita dalla griglia","  if (x0 < 0) issues.left = true;","  if (y0 < 0) issues.top = true;","  if (x1 >= cols) issues.right = true;","  if (y1 >= rows) issues.bottom = true;","","  // 🔹 Controllo muri","  for (let y = y0; y <= y1; y++) {","    for (let x = x0; x <= x1; x++) {","      if (y < 0 || y >= rows || x < 0 || x >= cols) continue;","      if (grid[y][x] === 1) {","        if (y === y0) issues.top = true;","        if (y === y1) issues.bottom = true;","        if (x === x0) issues.left = true;","        if (x === x1) issues.right = true;","      }","    }","  }","","  return issues;","}","","function adjustTarget(grid, target, width, height) {","  const maxDx = Math.floor(width / 2);","  const maxDy = Math.floor(height / 2);","","  const [cx, cy] = target;","","  if (isRectValid(grid, target, width, height)) return target;","","  const issues = getRectIssues(grid, [cx, cy], width, height);","","  // Costruisci vettori per direzioni problematiche","  const dxOptions = [];","  if (issues.left) dxOptions.push(...Array.from({length: maxDx}, (_, i) => i + 1)); // sposta destra","  if (issues.right) dxOptions.push(...Array.from({length: maxDx}, (_, i) => -(i + 1))); // sposta sinistra","  if (dxOptions.length === 0) dxOptions.push(0);","","  const dyOptions = [];","  if (issues.top) dyOptions.push(...Array.from({length: maxDy}, (_, i) => i + 1)); // sposta giù","  if (issues.bottom) dyOptions.push(...Array.from({length: maxDy}, (_, i) => -(i + 1))); // sposta su","  if (dyOptions.length === 0) dyOptions.push(0);","","  // 🔹 Prova tutte le combinazioni di spostamento","  for (const dx of dxOptions) {","    for (const dy of dyOptions) {","      const newTarget = [cx + dx, cy + dy];","","      // Controlla che il vecchio target rimanga dentro","      const x0 = Math.floor(newTarget[0] - width / 2);","      const y0 = Math.floor(newTarget[1] - height / 2);","      const x1 = x0 + width;","      const y1 = y0 + height;","","      if (","        cx >= x0 && cx <= x1 &&","        cy >= y0 && cy <= y1 &&","        isRectValid(grid, newTarget, width, height)","      ) {","        return newTarget;","      }","    }","  }","","  // Nessuna posizione valida trovata","  return target;","}","","","// === CONFIGURATION ===","const cellSize = 2;","","const mouseX = runtimeScene.getGame().getInputManager().getMouseX();","const mouseY = runtimeScene.getGame().getInputManager().getMouseY();","let goal = getGridPos(mouseX, mouseY, cellSize);","","// === Create a target marker ===","const target = runtimeScene.createObject(\"Target\");","target.setPosition(goal[0] * cellSize, goal[1] * cellSize);","target.setZOrder(1000);","// === Retrieve the map ===","","const map = runtimeScene.getObjects(\"Grid\")[0];","if (!map) return;","","const mapX = map.getX();","const mapY = map.getY();","const mapWidth = map.getWidth();","const mapHeight = map.getHeight();","","// === Build grid (2D numeric matrix) ===","const cols = Math.floor(mapWidth / cellSize);","const rows = Math.floor(mapHeight / cellSize);","const grid = Array.from({ length: rows }, () => new Array(cols).fill(0));","","// === Mark walls as blocked ===","const walls = runtimeScene.getObjects(\"Wall\");","if (!walls) return;","","for (const wall of walls) {","  const wx = wall.getX();","  const wy = wall.getY();","  const wWidth = wall.getWidth();","  const wHeight = wall.getHeight();","","  // Ignore walls outside map","  if (","    wx + wWidth < mapX ||","    wy + wHeight < mapY ||","    wx > mapX + mapWidth ||","    wy > mapY + mapHeight","  ) continue;","","  const startCol = Math.floor((wx - mapX) / cellSize);","  const endCol = Math.floor((wx + wWidth - mapX) / cellSize);","  const startRow = Math.floor((wy - mapY) / cellSize);","  const endRow = Math.floor((wy + wHeight - mapY) / cellSize);","","  for (let y = startRow; y <= endRow; y++) {","    for (let x = startCol; x <= endCol; x++) {","      if (y >= 0 && y < rows && x >= 0 && x < cols) {","        grid[y][x] = 1; // Mark as obstacle","      }","    }","  }","}","","// === Get player and start position ===","const player = runtimeScene.getObjects(\"Player\")[0];","if (!player) return;","","const playerWidth = player.getWidth();","const playerHeight = player.getHeight();","const playerCellWidth = Math.ceil(playerWidth / cellSize);","const playerCellHeight = Math.ceil(playerHeight / cellSize);","","const playerX = player.getX();","const playerY = player.getY();","const start = getGridPos(playerX, playerY, cellSize);","","if (!isRectValid(grid, goal, playerCellWidth, playerCellHeight)) {","  const issues = getRectIssues(grid, goal, playerCellWidth, playerCellHeight);","  goal = adjustTarget(grid, goal, playerCellWidth, playerCellHeight);","","  const newTarget = runtimeScene.createObject(\"NewTarget\");","  newTarget.setZOrder(1100);","  newTarget.setPosition(goal[0] * cellSize, goal[1] * cellSize);","","}","","// === Find the path ===","const path = aStarGrid(grid, start, goal, playerCellWidth, playerCellHeight);","","if (path && path.length > 0) {","  const worldPath = path.map(cell => ({","    x: cell[0] * cellSize + cellSize / 2,","    y: cell[1] * cellSize + cellSize / 2","  }));","","  player.getVariables().get(\"pathJson\").setString(JSON.stringify(worldPath));","  player.getVariables().get(\"pathStep\").setNumber(0);","  player.getVariables().get(\"pathLength\").setNumber(worldPath.length);","}",""],"parameterObjects":"","useStrict":true,"eventsSheetExpanded":false}]}],"eventsFunctionsExtensions":[],"externalLayouts":[]}