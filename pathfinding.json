{
  "firstLayout": "",
  "gdVersion": {
    "build": 243,
    "major": 5,
    "minor": 5,
    "revision": 0
  },
  "properties": {
    "adaptGameResolutionAtRuntime": true,
    "antialiasingMode": "MSAA",
    "antialisingEnabledOnMobile": false,
    "folderProject": false,
    "orientation": "default",
    "packageName": "it.fedbiagi",
    "pixelsRounding": false,
    "projectUuid": "4c435774-0ed7-4164-b883-1b70af0f7d52",
    "scaleMode": "linear",
    "sizeOnStartupMode": "",
    "templateSlug": "",
    "version": "1.0.0",
    "name": "Pathfinding",
    "description": "",
    "author": "",
    "windowWidth": 320,
    "windowHeight": 240,
    "latestCompilationDirectory": "",
    "maxFPS": 60,
    "minFPS": 20,
    "verticalSync": false,
    "platformSpecificAssets": {
      "android-icon-144": "",
      "android-icon-192": "",
      "android-icon-36": "",
      "android-icon-48": "",
      "android-icon-72": "",
      "android-icon-96": "",
      "android-windowSplashScreenAnimatedIcon": "",
      "desktop-icon-512": "",
      "ios-icon-100": "",
      "ios-icon-1024": "",
      "ios-icon-114": "",
      "ios-icon-120": "",
      "ios-icon-144": "",
      "ios-icon-152": "",
      "ios-icon-167": "",
      "ios-icon-180": "",
      "ios-icon-20": "",
      "ios-icon-29": "",
      "ios-icon-40": "",
      "ios-icon-50": "",
      "ios-icon-57": "",
      "ios-icon-58": "",
      "ios-icon-60": "",
      "ios-icon-72": "",
      "ios-icon-76": "",
      "ios-icon-80": "",
      "ios-icon-87": ""
    },
    "loadingScreen": {
      "backgroundColor": 0,
      "backgroundFadeInDuration": 0.2,
      "backgroundImageResourceName": "",
      "gdevelopLogoStyle": "light",
      "logoAndProgressFadeInDuration": 0.2,
      "logoAndProgressLogoFadeInDelay": 0,
      "minDuration": 1.5,
      "progressBarColor": 16777215,
      "progressBarHeight": 20,
      "progressBarMaxWidth": 200,
      "progressBarMinWidth": 40,
      "progressBarWidthPercent": 30,
      "showGDevelopSplash": true,
      "showProgressBar": true
    },
    "watermark": {
      "placement": "bottom-left",
      "showWatermark": true
    },
    "authorIds": [],
    "authorUsernames": [],
    "categories": [],
    "playableDevices": [],
    "extensionProperties": [],
    "platforms": [
      {
        "name": "GDevelop JS platform"
      }
    ],
    "currentPlatform": "GDevelop JS platform"
  },
  "resources": {
    "resources": [
      {
        "file": "assets/NewSprite.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite2.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite2",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite3.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite3",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite4.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite4",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite5.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite5",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewTiledSprite.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\",\"pskl\":{},\"localFilePath\":\"assets/NewTiledSprite.png\"}",
        "name": "NewTiledSprite",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewTiledSprite2.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\",\"pskl\":{},\"localFilePath\":\"assets/NewTiledSprite2.png\"}",
        "name": "NewTiledSprite2",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite6.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite6",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite7.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite7",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite8.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\",\"localFilePath\":\"assets/NewSprite8.png\"}",
        "name": "NewSprite8",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/New image.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\",\"pskl\":{}}",
        "name": "New image",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/New image2.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\",\"pskl\":{}}",
        "name": "New image2",
        "smoothed": true,
        "userAdded": false
      },
      {
        "file": "assets/NewSprite9.png",
        "kind": "image",
        "metadata": "{\"extension\":\".png\"}",
        "name": "NewSprite9",
        "smoothed": true,
        "userAdded": false
      }
    ],
    "resourceFolders": []
  },
  "objects": [],
  "objectsFolderStructure": {
    "folderName": "__ROOT"
  },
  "objectsGroups": [],
  "variables": [],
  "layouts": [
    {
      "b": 209,
      "disableInputWhenNotFocused": true,
      "mangledName": "Main",
      "name": "Main",
      "r": 209,
      "standardSortMethod": true,
      "stopSoundsOnStartup": true,
      "title": "",
      "v": 209,
      "uiSettings": {
        "grid": false,
        "gridType": "rectangular",
        "gridWidth": 32,
        "gridHeight": 32,
        "gridOffsetX": 0,
        "gridOffsetY": 0,
        "gridColor": 10401023,
        "gridAlpha": 0.8,
        "snap": false,
        "zoomFactor": 2.1301093426549857,
        "windowMask": false,
        "selectedLayer": ""
      },
      "objectsGroups": [],
      "variables": [
        {
          "name": "path",
          "type": "array",
          "children": []
        }
      ],
      "instances": [
        {
          "angle": 0,
          "customSize": true,
          "depth": 0,
          "height": 56,
          "layer": "",
          "name": "Player",
          "persistentUuid": "2950e447-e7f7-4c4a-97b8-ade6b711f890",
          "width": 22,
          "x": 233,
          "y": 96,
          "zOrder": 2,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "depth": 0,
          "height": 128,
          "layer": "",
          "name": "Grid",
          "persistentUuid": "9f44ca41-bcaf-4815-b1f3-1c6cf325373f",
          "width": 1680,
          "x": -1360,
          "y": 40,
          "zOrder": 0,
          "numberProperties": [],
          "stringProperties": [
            {
              "name": "tilemap",
              "value": "{\"tileWidth\":168,\"tileHeight\":168,\"dimX\":10,\"dimY\":1,\"layers\":[{\"id\":0,\"alpha\":1,\"tiles\":[[0,0,0,0,0,0,0,0,0,0]]}]}"
            }
          ],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "depth": 1,
          "height": 8,
          "layer": "",
          "name": "Wall",
          "persistentUuid": "96645d62-f6c3-4832-8048-8777aaf28b51",
          "width": 368,
          "x": -48,
          "y": 79,
          "zOrder": 5,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "depth": 1,
          "height": 12,
          "layer": "",
          "name": "Wall",
          "persistentUuid": "a12a0416-633d-4094-86ac-cac127eeed07",
          "width": 353,
          "x": -33,
          "y": 156,
          "zOrder": 6,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "depth": 1,
          "height": 89,
          "keepRatio": true,
          "layer": "",
          "name": "Wall",
          "persistentUuid": "8df3b314-e7da-4a26-838f-ada4335cf729",
          "width": 8,
          "x": 312,
          "y": 79,
          "zOrder": 7,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        }
      ],
      "objects": [
        {
          "adaptCollisionMaskAutomatically": true,
          "assetStoreId": "",
          "name": "Player",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [
            {
              "name": "pathJson",
              "type": "string",
              "value": "\"\""
            },
            {
              "name": "path",
              "type": "array",
              "children": []
            },
            {
              "name": "pathStep",
              "type": "number",
              "value": 0
            },
            {
              "name": "pathLength",
              "type": "number",
              "value": 0
            },
            {
              "name": "targetX",
              "type": "number",
              "value": 0
            },
            {
              "name": "targetY",
              "type": "number",
              "value": 0
            }
          ],
          "effects": [],
          "behaviors": [
            {
              "name": "Pathfinding",
              "type": "PathfindingBehavior::PathfindingBehavior",
              "acceleration": 40,
              "allowDiagonals": false,
              "angleOffset": 0,
              "angularMaxSpeed": 180,
              "cellHeight": 2,
              "cellWidth": 2,
              "extraBorder": 0,
              "gridOffsetX": 0,
              "gridOffsetY": 0,
              "maxSpeed": 40,
              "rotateObject": false,
              "smoothingMaxCellGap": 1
            }
          ],
          "animations": [
            {
              "name": "NewSprite",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "metadata": "{\"pskl\":{}}",
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": true,
                      "image": "NewSprite5",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": [
                        [
                          {
                            "x": 0,
                            "y": 0
                          },
                          {
                            "x": 36,
                            "y": 0
                          },
                          {
                            "x": 36,
                            "y": 96
                          },
                          {
                            "x": 0,
                            "y": 96
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "adaptCollisionMaskAutomatically": true,
          "assetStoreId": "",
          "name": "Wall",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewSprite",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "metadata": "{\"pskl\":{}}",
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": true,
                      "image": "NewSprite2",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": [
                        [
                          {
                            "x": 0,
                            "y": 0
                          },
                          {
                            "x": 8,
                            "y": 0
                          },
                          {
                            "x": 8,
                            "y": 8
                          },
                          {
                            "x": 0,
                            "y": 8
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "adaptCollisionMaskAutomatically": true,
          "assetStoreId": "",
          "name": "Target",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewSprite",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "metadata": "{\"pskl\":{}}",
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": true,
                      "image": "NewSprite9",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 2,
                        "y": 2
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": [
                        [
                          {
                            "x": 0,
                            "y": 0
                          },
                          {
                            "x": 1,
                            "y": 0
                          },
                          {
                            "x": 1,
                            "y": 1
                          },
                          {
                            "x": 0,
                            "y": 1
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "adaptCollisionMaskAutomatically": true,
          "assetStoreId": "",
          "name": "NewTarget",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewSprite",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "metadata": "{\"pskl\":{}}",
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": true,
                      "image": "NewSprite8",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": [
                        [
                          {
                            "x": 0,
                            "y": 0
                          },
                          {
                            "x": 4,
                            "y": 0
                          },
                          {
                            "x": 4,
                            "y": 4
                          },
                          {
                            "x": 0,
                            "y": 4
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "assetStoreId": "",
          "name": "Grid",
          "type": "TileMap::SimpleTileMap",
          "variables": [],
          "effects": [],
          "behaviors": [],
          "content": {
            "atlasImage": "New image2",
            "rowCount": 1,
            "columnCount": 1,
            "tileSize": 168,
            "tilesWithHitBox": ""
          }
        }
      ],
      "objectsFolderStructure": {
        "folderName": "__ROOT",
        "children": [
          {
            "objectName": "Player"
          },
          {
            "objectName": "Wall"
          },
          {
            "objectName": "Target"
          },
          {
            "objectName": "NewTarget"
          },
          {
            "objectName": "Grid"
          }
        ]
      },
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "DepartScene"
              },
              "parameters": [
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetCameraCenterX"
              },
              "parameters": [
                "",
                "=",
                "SceneWindowWidth()/2",
                "",
                "0"
              ]
            },
            {
              "type": {
                "value": "SetCameraCenterY"
              },
              "parameters": [
                "",
                "=",
                "SceneWindowHeight()/2",
                "",
                "0"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "PosX"
              },
              "parameters": [
                "Player",
                "<",
                "(SceneWindowWidth() / 2) - (Player.Width()/2)"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetCameraCenterX"
              },
              "parameters": [
                "",
                "=",
                "Player.CenterX()",
                "",
                ""
              ]
            }
          ]
        },
        {
          "disabled": true,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "SetCameraCenterY"
              },
              "parameters": [
                "",
                "=",
                "Player.CenterY()",
                "",
                ""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "MouseButtonFromTextPressed"
              },
              "parameters": [
                "",
                "\"Left\""
              ]
            },
            {
              "type": {
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": []
            }
          ],
          "actions": [],
          "events": [
            {
              "type": "BuiltinCommonInstructions::Link",
              "include": {
                "includeConfig": 0
              },
              "target": "PathFinding"
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "StringObjectVariable"
              },
              "parameters": [
                "Player",
                "pathJson",
                "!=",
                "\"\""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "JSONToVariableStructure2"
              },
              "parameters": [
                "Player.pathJson",
                "path"
              ]
            },
            {
              "type": {
                "value": "SetNumberObjectVariable"
              },
              "parameters": [
                "Player",
                "pathStep",
                "=",
                "0"
              ]
            },
            {
              "type": {
                "value": "SetStringObjectVariable"
              },
              "parameters": [
                "Player",
                "pathJson",
                "=",
                "\"\""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "NumberObjectVariable"
              },
              "parameters": [
                "Player",
                "pathStep",
                "<",
                "Player.pathLength"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetNumberObjectVariable"
              },
              "parameters": [
                "Player",
                "targetX",
                "=",
                "path[Player.pathStep].x"
              ]
            },
            {
              "type": {
                "value": "SetNumberObjectVariable"
              },
              "parameters": [
                "Player",
                "targetY",
                "=",
                "path[Player.pathStep].y"
              ]
            },
            {
              "type": {
                "value": "SetNumberObjectVariable"
              },
              "parameters": [
                "Player",
                "pathStep",
                "=",
                "Player.pathStep + 1"
              ]
            },
            {
              "type": {
                "value": "MettreXY"
              },
              "parameters": [
                "Player",
                "=",
                "Player.targetX",
                "=",
                "Player.targetY"
              ]
            }
          ]
        },
        {
          "disabled": true,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "NumberObjectVariable"
              },
              "parameters": [
                "Player",
                "pathStep",
                ">=",
                "Player.pathLength"
              ]
            }
          ],
          "actions": []
        }
      ],
      "layers": [
        {
          "ambientLightColorB": 200,
          "ambientLightColorG": 200,
          "ambientLightColorR": 200,
          "camera3DFarPlaneDistance": 10000,
          "camera3DFieldOfView": 45,
          "camera3DNearPlaneDistance": 3,
          "cameraType": "",
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "isLocked": false,
          "name": "",
          "renderingType": "",
          "visibility": true,
          "cameras": [
            {
              "defaultSize": true,
              "defaultViewport": true,
              "height": 0,
              "viewportBottom": 1,
              "viewportLeft": 0,
              "viewportRight": 1,
              "viewportTop": 0,
              "width": 0
            }
          ],
          "effects": [
            {
              "effectType": "Scene3D::HemisphereLight",
              "name": "3D Ambient Hemisphere Light",
              "doubleParameters": {
                "elevation": 40,
                "intensity": 0.33,
                "rotation": 300
              },
              "stringParameters": {
                "groundColor": "127;127;127",
                "skyColor": "255;255;255",
                "top": "Z+"
              },
              "booleanParameters": {}
            },
            {
              "effectType": "Scene3D::DirectionalLight",
              "name": "3D Sun Light",
              "doubleParameters": {
                "distanceFromCamera": 1500,
                "elevation": 40,
                "frustumSize": 4000,
                "intensity": 0.75,
                "minimumShadowBias": 0,
                "rotation": 300
              },
              "stringParameters": {
                "color": "255;255;255",
                "shadowQuality": "medium",
                "top": "Z+"
              },
              "booleanParameters": {
                "isCastingShadow": true
              }
            }
          ]
        }
      ],
      "behaviorsSharedData": [
        {
          "name": "Animation",
          "type": "AnimatableCapability::AnimatableBehavior"
        },
        {
          "name": "Effect",
          "type": "EffectCapability::EffectBehavior"
        },
        {
          "name": "Flippable",
          "type": "FlippableCapability::FlippableBehavior"
        },
        {
          "name": "Opacity",
          "type": "OpacityCapability::OpacityBehavior"
        },
        {
          "name": "Pathfinding",
          "type": "PathfindingBehavior::PathfindingBehavior"
        },
        {
          "name": "Resizable",
          "type": "ResizableCapability::ResizableBehavior"
        },
        {
          "name": "Scale",
          "type": "ScalableCapability::ScalableBehavior"
        }
      ]
    }
  ],
  "externalEvents": [
    {
      "associatedLayout": "Main",
      "name": "PathFinding",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": []
        },
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": [
            "// === FUNCTION: Compute grid index ===",
            "function getGridPos(x, y, cellSize) {",
            "  return [Math.floor(x / cellSize), Math.floor(y / cellSize)];",
            "}",
            "",
            "// === Simple Priority Queue for A* ===",
            "function PriorityQueue() {",
            "  const elements = [];",
            "  return {",
            "    enqueue(element) {",
            "      elements.push(element);",
            "      elements.sort((a, b) => a.f - b.f);",
            "    },",
            "    dequeue() {",
            "      return elements.shift();",
            "    },",
            "    isEmpty() {",
            "      return elements.length === 0;",
            "    },",
            "    some(fn) {",
            "      return elements.some(fn);",
            "    }",
            "  };",
            "}",
            "",
            "// === Check if the player rectangle can fit in (x, y) ===",
            "function isFreeSpace(grid, x, y, width, height) {",
            "  const rows = grid.length;",
            "  const cols = grid[0].length;",
            "  if (x < 0 || y < 0 || x + width > cols || y + height > rows) {",
            "    return false;",
            "  }",
            "",
            "  for (let dy = 0; dy < height; dy++) {",
            "    for (let dx = 0; dx < width; dx++) {",
            "      if (grid[y + dy][x + dx] === 1) {",
            "        return false;",
            "      }",
            "    }",
            "  }",
            "  return true;",
            "}",
            "",
            "// === A* pathfinding adapted for a rectangular player ===",
            "function aStarGrid(grid, start, goal, width, height) {",
            "",
            "  const open = PriorityQueue();",
            "  const closed = new Set();",
            "  open.enqueue({ pos: start, parent: null, g: 0, h: 0, f: 0 });",
            "",
            "  while (!open.isEmpty()) {",
            "    const node = open.dequeue();",
            "    closed.add(node.pos.toString());",
            "",
            "    const [x, y] = node.pos;",
            "    // ✅ Goal check: player reaches goal only if the goal matches the center of the rectangle",
            "    const centerX = x + Math.floor(width / 2);",
            "    const centerY = y + Math.floor(height / 2);",
            "",
            "    const reached = (centerX === goal[0] && centerY === goal[1]);",
            "",
            "    if (reached) {",
            "      // Build path from current node",
            "      const path = [];",
            "      let n = node;",
            "      while (n) {",
            "        path.push(n.pos);",
            "        n = n.parent;",
            "      }",
            "      return path.reverse();",
            "    }",
            "",
            "    // 4-directional movement",
            "    const neighbors = [",
            "      [x - 1, y],",
            "      [x + 1, y],",
            "      [x, y - 1],",
            "      [x, y + 1]",
            "    ];",
            "",
            "    for (const [nx, ny] of neighbors) {",
            "      if (!isFreeSpace(grid, nx, ny, width, height)) continue;",
            "      if (closed.has([nx, ny].toString())) continue;",
            "",
            "      const neighborNode = {",
            "        pos: [nx, ny],",
            "        parent: node,",
            "        g: node.g + 1,",
            "        h: Math.abs((nx + Math.floor(width / 2)) - goal[0]) + Math.abs((ny + Math.floor(height / 2)) - goal[1])",
            "",
            "        //h: Math.abs(nx - goal[0]) + Math.abs(ny - goal[1]) // Manhattan heuristic",
            "      };",
            "      neighborNode.f = neighborNode.g + neighborNode.h;",
            "",
            "      if (open.some(n => n.pos.toString() === neighborNode.pos.toString() && n.f <= neighborNode.f))",
            "        continue;",
            "",
            "      open.enqueue(neighborNode);",
            "    }",
            "  }",
            "",
            "  return null;",
            "}",
            "",
            "function isRectValid(grid, target, width, height) {",
            "  const rows = grid.length;",
            "  const cols = grid[0].length;",
            "",
            "  const [cx, cy] = target;",
            "",
            "  // Calcola l'angolo in alto a sinistra del rettangolo centrato sul target",
            "  const x0 = Math.round(cx - width / 2);",
            "  const y0 = Math.round(cy - height / 2);",
            "",
            "  // Controlla se il rettangolo è completamente dentro la griglia",
            "  if (x0 < 0 || y0 < 0 || x0 + width > cols || y0 + height > rows) {",
            "    return false;",
            "  }",
            "",
            "  // Controlla se ci sono muri",
            "  for (let y = y0; y < y0 + height; y++) {",
            "    for (let x = x0; x < x0 + width; x++) {",
            "      if (grid[y][x] === 1) {",
            "        return false;",
            "      }",
            "    }",
            "  }",
            "",
            "  return true;",
            "}",
            "",
            "function getRectIssues(grid, target, width, height) {",
            "  const rows = grid.length;",
            "  const cols = grid[0].length;",
            "  const [cx, cy] = target;",
            "",
            "  const maxDx = Math.floor(width / 2);",
            "  const maxDy = Math.floor(height / 2);",
            "",
            "  const issues = { top: true, bottom: true, left: true, right: true };",
            "",
            "//alert(cy + ' - ' + (cy + maxDy));",
            "  // controllo verso il basso",
            "  for (let y0 = cy; y0 <= cy + maxDy + 2; y0++ ) {",
            "    let newtarget = [cx, y0];",
            "    if (isRectValid(grid, newtarget, width, height)) {",
            "      issues.bottom = false;",
            "    }",
            "  }",
            "",
            "  // controllo verso l'alto",
            "  for (let y0 = cy; y0 >= cy - maxDy; y0-- ) {",
            "    let newtarget = [cx, y0];",
            "    if (isRectValid(grid, newtarget, width, height)) {",
            "      issues.top = false;",
            "    }",
            "  }",
            "",
            "  // controllo verso destra",
            "  for (let x0 = cx; x0 <= cx + maxDx; x0++ ) {",
            "    let newtarget = [x0, cy];",
            "    if (isRectValid(grid, newtarget, width, height)) {",
            "      issues.right = false;",
            "    }",
            "  }",
            "",
            "  // controllo verso sinistra",
            "  for (let x0 = cx; x0 >= cx - maxDx; x0-- ) {",
            "    let newtarget = [x0, cy];",
            "    if (isRectValid(grid, newtarget, width, height)) {",
            "      issues.left = false;",
            "    }",
            "  }",
            "",
            "  alert('griglia -> issues.bottom: ' + issues.bottom + ",
            "  ' - issues.top: ' + issues.top + ",
            "  ' - issues.left: ' + issues.left + ",
            "  ' - issues.right: ' + issues.right",
            "  );",
            "",
            "  return issues;",
            "}",
            "",
            "function adjustTarget(grid, target, width, height) {",
            "  const maxDx = Math.floor(width / 2);",
            "  const maxDy = Math.floor(height / 2);",
            "",
            "  const [cx, cy] = target;",
            "",
            "  if (isRectValid(grid, target, width, height)) return target;",
            "",
            "  const issues = getRectIssues(grid, [cx, cy], width, height);",
            "",
            "  if (!issues.bottom) {",
            "    // controllo verso il basso",
            "    for (let y0 = cy; y0 <= cy + maxDy + 2; y0++ ) {",
            "      let newtarget = [cx, y0];",
            "      if (isRectValid(grid, newtarget, width, height)) {",
            "        return newtarget;",
            "      }",
            "    }",
            "  }",
            "",
            "  if (!issues.top) {",
            "    // controllo verso l'alto",
            "    for (let y0 = cy; y0 > cy - maxDy; y0-- ) {",
            "      let newtarget = [cx, y0];",
            "      if (isRectValid(grid, newtarget, width, height)) {",
            "        return newtarget;",
            "      }",
            "    }",
            "  }",
            "",
            "  ",
            "",
            "  // Nessuna posizione valida trovata",
            "  return target;",
            "}",
            "",
            "const cellSize = 1;",
            "",
            "const layer = runtimeScene.getLayer(\"Layer base\"); // il layer seguito dalla telecamera",
            "const camX = layer.getCameraX();",
            "const camY = layer.getCameraY();",
            "const camWidth = layer.getCameraWidth();",
            "const camHeight = layer.getCameraHeight();",
            "",
            "const mincamX = camX - Math.floor(camWidth / 2);",
            "const maxcamX = camX + Math.floor(camWidth / 2);",
            "const mincamY = camY - Math.floor(camHeight / 2);",
            "const maxcamY = camY + Math.floor(camHeight / 2);",
            "",
            "//alert('maxCamX: ' + maxcamX);",
            "",
            "const sfondo = runtimeScene.getObjects(\"Grid\")[0];",
            "const top = sfondo.getY();",
            "const bottom = sfondo.getY() + sfondo.getHeight();",
            "const left = sfondo.getX();",
            "const right = sfondo.getX() + sfondo.getWidth();",
            "const width = sfondo.getWidth();",
            "const height = sfondo.getHeight();",
            "",
            "const mouseX = runtimeScene.getGame().getInputManager().getMouseX();",
            "const mouseY = runtimeScene.getGame().getInputManager().getMouseY();",
            "",
            "//alert('mincamY: ' + mincamY);",
            "//alert('top: ' + top);",
            "//alert('bottom: ' + bottom);",
            "//alert('height: ' + height);",
            "//alert('(Math.floor(mouseY) + mincamY): ' + (Math.round(mouseY) + mincamY));",
            "//alert('(Math.floor(mouseY) + mincamY - top): ' + (Math.round(mouseY) + mincamY - top));",
            "//alert('mouseY: ' + mouseY);",
            "//alert('mouseX: ' + mouseX);",
            "",
            "if ((Math.round(mouseY) + mincamY) < top || ",
            "(Math.round(mouseY) + mincamY) > bottom || ",
            "(Math.round(mouseX) + mincamX) > right) return;",
            "",
            "//alert(layer.getCameraWidth());",
            "",
            "//alert('MincamX: ' +  mincamX + ' - MincamY: ' + mincamY + ' - MaxcamX: ' +  maxcamX + ' - MaxcamY: ' + maxcamY + ' - camX: ' +  camX + ' - camY: ' + camY);",
            "",
            "",
            "//let goal = getGridPos(mouseX + mincamX, mouseY + mincamY, cellSize);",
            "let goal = getGridPos(Math.round(mouseX) + mincamX, (Math.round(mouseY) + mincamY - top), cellSize);",
            "",
            "// === Create a target marker ===",
            "const target = runtimeScene.createObject(\"Target\");",
            "//target.setPosition(mouseX, mouseY);",
            "target.setPosition(mincamX + mouseX, mincamY + mouseY);",
            "target.setZOrder(1000);",
            "",
            "//const goalX = target.getX() + mincamX;",
            "//const goalY = target.getY() + mincamY;",
            "//let goal = getGridPos(goalX, goalY, cellSize);",
            "//alert('mouseX: ' + goal[0] + ' - mouseY: ' + goal[1]);",
            "",
            "// === Build grid (2D numeric matrix) ===",
            "const cols = Math.floor(camWidth / cellSize);",
            "const rows = Math.floor(height / cellSize);",
            "",
            "const grid = Array.from({ length: rows }, () => new Array(cols).fill(0));",
            "",
            "// === Mark walls as blocked ===",
            "const walls = runtimeScene.getObjects(\"Wall\");",
            "if (!walls) return;",
            "",
            "for (const wall of walls) {",
            "  const wx = wall.getX();",
            "  const wy = wall.getY();",
            "  const wWidth = wall.getWidth();",
            "  const wHeight = wall.getHeight();",
            "",
            "  // Ignore walls outside map",
            "  if (",
            "    wx + wWidth < mincamX ||",
            "    wy + wHeight < top ||",
            "    wx > mincamX + camWidth ||",
            "    wy > bottom",
            "  ) continue;",
            "",
            "  const startCol = Math.floor((wx - mincamX) / cellSize);",
            "  const endCol = Math.floor((wx + wWidth - mincamX) / cellSize);",
            "  const startRow = Math.floor((wy - top) / cellSize);",
            "  const endRow = Math.floor((wy + wHeight - top) / cellSize);",
            "//alert(startCol);",
            "  for (let y = startRow; y <= endRow; y++) {",
            "    for (let x = startCol; x <= endCol; x++) {",
            "      if (y >= 0 && y < rows && x >= 0 && x < cols) {",
            "        grid[y][x] = 1; // Mark as obstacle",
            "      }",
            "    }",
            "  }",
            "}",
            "",
            "// === Get player and start position ===",
            "const player = runtimeScene.getObjects(\"Player\")[0];",
            "if (!player) return;",
            "",
            "const playerWidth = player.getWidth();",
            "const playerHeight = player.getHeight();",
            "const playerCellWidth = Math.floor(playerWidth / cellSize);",
            "const playerCellHeight = Math.floor(playerHeight / cellSize);",
            "",
            "const playerX = player.getX() - mincamX;// camX - mincamX;",
            "const playerY = player.getY() - top;// camY - mincamY;",
            "",
            "//alert('top: ' + top + ' - player.getY(): ' + player.getY() + ' - playerY: ' + playerY);",
            "",
            "const start = getGridPos(playerX, playerY, cellSize);",
            "",
            "//alert('cols: ' + cols + ' - rows: ' + rows + ' - startX: ' + start[0] + ' - startY: ' + start[1] + ' - targetX: ' + goal[0] + ' - targetY: ' + goal[1] + ' - playerCellWidth: ' + playerCellWidth + ' - playerCellHeight: ' + playerCellHeight);",
            "",
            "",
            "goal = adjustTarget(grid, goal, playerCellWidth, playerCellHeight);",
            "",
            "//alert('nuove: ' + (goal[0] + ' - ' + goal[1]));",
            "",
            "const newTarget = runtimeScene.createObject(\"NewTarget\");",
            "newTarget.setZOrder(1100);",
            "newTarget.setPosition(mincamX + (goal[0] * cellSize), top + (goal[1] * cellSize));",
            "",
            "",
            "//alert(playerCellWidth + ', ' + playerCellHeight);",
            "// === Find the path ===",
            "const path = aStarGrid(grid, start, goal, playerCellWidth, playerCellHeight);",
            "//alert(path);",
            "if (path && path.length > 0) {",
            "  const worldPath = path.map(cell => ({",
            "    x: mincamX + (cell[0] * cellSize),",
            "    y: top + (cell[1] * cellSize)",
            "  }));",
            "",
            "  player.getVariables().get(\"pathJson\").setString(JSON.stringify(worldPath));",
            "  player.getVariables().get(\"pathStep\").setNumber(0);",
            "  player.getVariables().get(\"pathLength\").setNumber(worldPath.length);",
            "}",
            ""
          ],
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": true
        }
      ]
    }
  ],
  "eventsFunctionsExtensions": [],
  "externalLayouts": []
}